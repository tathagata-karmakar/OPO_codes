#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Jul 31 09:22:51 2023

@author: t_karmakar
"""

import os
import qutip as qt
import time
import matplotlib.pyplot as plt
import matplotlib as mpl
import numpy as np
from scipy.integrate import simps as intg
from matplotlib import rc
from pylab import rcParams
from FNO_structure import *
os.environ["PATH"] += os.pathsep + '/Library/TeX/texbin'
rc('text',usetex=True)

import jax.numpy as jnp
from jax import grad, jit, vmap
from jax import random
from jax import device_put

def selu(x,alpha=1.67,lmbda=1.05):
    return lmbda*jnp.where(x>0,x,alpha*jnp.exp(x)-alpha)
def sum_logistic(x):
    return jnp.sum(1.0/(1.0+jnp.exp(-x)))
def first_finite_differences(f,x):
    eps=1e-3
    return jnp.array([(f(x+eps*v)-f(x-eps*v))/(2*eps) for v in jnp.eye(len(x))])

key=random.PRNGKey(0)
mat=random.normal(key,(150,100))
batched_x=random.normal(key,(10,100))
def apply_matrix(v):
    return jnp.dot(mat,v)
def naively_batched_apply_matrix(v_batched):
    return jnp.stack([apply_matrix(v) for v in v_batched])
print ('Naively batched')
%timeit naively_batched_apply_matrix(batched_x).block_until_ready()

def batched_apply_matrix(v_batched):
    return jnp.dot(v_batched,mat.T)

print ('Manually batched')
%timeit batched_apply_matrix(batched_x).block_until_ready()

def vmap_batched_apply_matrix(v_batched):
    return vmap(apply_matrix)(v_batched)
print ('Auto-vectorized with vmap')
%timeit vmap_batched_apply_matrix(batched_x).block_until_ready()